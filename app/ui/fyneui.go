package ui

import (
	"fmt"
	"os"
	"sort"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"fyne.io/systray"
	"github.com/sirion/fanmi/app/config"
)

/// Helper Functions

func NewBigText(text string) *canvas.Text {
	app := fyne.CurrentApp()
	th := app.Settings().Theme()
	thVar := app.Settings().ThemeVariant()

	cTxt := canvas.NewText(text, th.Color(theme.ColorNameForeground, thVar))
	cTxt.TextSize = theme.TextSize() * 2

	return cTxt
}

/// FyneUI

type FyneUI struct {
	done   chan bool
	config *config.Configuration

	app       fyne.App
	win       fyne.Window
	temp      *canvas.Text
	speed     *canvas.Text
	mode      *widget.Select
	modeLabel *canvas.Text
	curve     *widget.Select
}

func (ui *FyneUI) Init(config *config.Configuration) chan bool {
	ui.config = config

	ui.app = app.New()

	ui.app.SetIcon(fyne.NewStaticResource("appIcon.png", appIcon))

	ui.win = ui.app.NewWindow("FanMi")
	ui.win.SetMaster()
	ui.win.SetFixedSize(true)
	ui.win.SetOnClosed(ui.win.Close)
	ui.win.Resize(fyne.NewSize(300, 100))

	ui.temp = NewBigText("0")
	ui.temp.Alignment = fyne.TextAlignTrailing

	ui.speed = NewBigText("0")
	ui.speed.Alignment = fyne.TextAlignTrailing

	chkActive := widget.NewCheck("active", func(b bool) {
		config.Active = b
		if b {
			ui.temp.Color = theme.ForegroundColor()
			ui.speed.Color = theme.ForegroundColor()
		} else {
			ui.temp.Color = theme.DisabledColor()
			ui.speed.Color = theme.DisabledColor()
		}
		ui.temp.Refresh()
		ui.speed.Refresh()
	})
	chkActive.SetChecked(ui.config.Active)

	ui.modeLabel = canvas.NewText("Power:", theme.ForegroundColor())
	ui.mode = widget.NewSelect([]string{
		"auto",
		"low",
		"high",
		// "manual",
		// "profile_standard",
		// "profile_min_sclk",
		// "profile_min_mclk",
		// "profile_peak",
	}, func(mode string) {
		ui.config.SetPowerMode(mode)
	})
	ui.mode.Selected = "auto"


	display := container.NewHBox(
			container.NewVBox(
				NewBigText("Temperature:"),
				layout.NewSpacer(),
				NewBigText("Fan Speed:"),
			),
			layout.NewSpacer(),
			container.NewVBox(
				ui.temp,
				layout.NewSpacer(),
				ui.speed,
			),
			container.NewVBox(
				NewBigText("°C"),
				layout.NewSpacer(),
				NewBigText("%"),
			),
	)

	ctrlActivePower := container.NewHBox(
			chkActive,
			layout.NewSpacer(),
			ui.modeLabel,
			ui.mode,
		// btnCurve,
	)

	content := container.NewVBox(display)

	if len(ui.config.Curves) > 1 {
		curveNames := make([]string, 0, len(ui.config.Curves))
		for key := range ui.config.Curves {
			curveNames = append(curveNames, key)
		}
		sort.Slice(curveNames, func(a, b int) bool {
			return curveNames[a] < curveNames[b]
		})

		ui.curve = widget.NewSelect(curveNames, func(curve string) {
			ui.config.SetCurve(curve)
			ui.curve.Selected = curve
		})
		ui.curve.Selected = ui.config.StartingCurve

		content.Add(container.NewHBox(
			canvas.NewText("Curve:", theme.ForegroundColor()),
			layout.NewSpacer(),
			ui.curve,
	))
	}

	content.Add(ctrlActivePower)

	ui.win.SetContent(content)

	ui.win.Show()

	ui.done = make(chan bool)
	return ui.done
}

func (ui *FyneUI) Run() {
	ui.app.Run()
	ui.done <- true
}

func (ui *FyneUI) Exit() {
	ui.app.Quit()
	go (func() {
		ui.done <- true
	})()
}

func (*FyneUI) Fatal(exitCode int, message string) {
	fmt.Fprint(os.Stderr, message)
	os.Exit(exitCode)
}
func (ui *FyneUI) Temperature(temp float32) {
	ui.temp.Text = fmt.Sprintf("%2.0f", temp)
	ui.temp.Refresh()
	// ui.temp.SetText(fmt.Sprintf("%2.0f°", temp))
}

func (ui *FyneUI) Speed(speed float32) {
	ui.speed.Text = fmt.Sprintf("%2.1f", speed*100)
	ui.speed.Refresh()
	// ui.speed.SetText(fmt.Sprintf("%2.1f%%", speed*100))
}

func (ui *FyneUI) PowerMode(mode string) {
	if mode == "" {
		// Power mode not supported
		ui.mode.Hidden = true
		ui.modeLabel.Hidden = true
	} else {
		ui.mode.Selected = mode
	}
	ui.mode.Refresh()
}

func (*FyneUI) Message(message string) {
	fmt.Print(message)
}

var appIcon = []byte{
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x08, 0x03, 0x00, 0x00, 0x00, 0x44, 0xA4, 0x8A, 0xC6, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x00, 0xF1, 0x00, 0x00, 0x00, 0xF1, 0x01, 0x39, 0x0C, 0x0C, 0xE4, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x77, 0x77, 0x77, 0x2E, 0x69, 0x6E, 0x6B, 0x73, 0x63, 0x61, 0x70, 0x65, 0x2E, 0x6F, 0x72, 0x67, 0x9B, 0xEE, 0x3C, 0x1A, 0x00, 0x00, 0x01, 0x14, 0x50, 0x4C, 0x54, 0x45, 0x47, 0x70, 0x4C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0x36, 0x36, 0x36, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0xFF, 0xFF, 0xFF, 0x1C, 0x1C, 0x1C, 0xD0, 0xD0, 0xD0, 0xFF, 0xFF, 0xFF, 0x4E, 0x4E, 0x4E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x23, 0x23, 0x23, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0x26, 0x26, 0x26, 0x22, 0x22, 0x22, 0xF4, 0xF4, 0xF4, 0x3D, 0x3D, 0x3D, 0xFF, 0xFF, 0xFF, 0xD7, 0xD7, 0xD7, 0x2F, 0x2F, 0x2F, 0xBE, 0xBE, 0xBE, 0x96, 0x96, 0x96, 0xC6, 0xC6, 0xC6, 0x42, 0x42, 0x42, 0x32, 0x32, 0x32, 0x5F, 0x5F, 0x5F, 0xF2, 0xF2, 0xF2, 0x31, 0x31, 0x31, 0xDF, 0xDF, 0xDF, 0xC9, 0xC9, 0xC9, 0x14, 0x14, 0x14, 0x5C, 0x5C, 0x5C, 0x2C, 0x2C, 0x2C, 0xA1, 0xA1, 0xA1, 0x3C, 0x3C, 0x3C, 0x7C, 0x7C, 0x7C, 0xEB, 0xEB, 0xEB, 0x16, 0x16, 0x16, 0x72, 0x72, 0x72, 0x88, 0x88, 0x88, 0xF6, 0xF6, 0xF6, 0x6A, 0x6A, 0x6A, 0x46, 0x46, 0x46, 0x84, 0x84, 0x84, 0x60, 0x60, 0x60, 0x74, 0x74, 0x74, 0x1E, 0x1E, 0x1E, 0x09, 0x09, 0x09, 0x10, 0x10, 0x10, 0xE2, 0xE2, 0xE2, 0xCC, 0xCC, 0xCC, 0x19, 0x19, 0x19, 0xE0, 0xE0, 0xE0, 0x3A, 0x3A, 0x3A, 0x6B, 0x6B, 0x6B, 0x92, 0x92, 0x92, 0xB8, 0xB8, 0xB8, 0xA0, 0xA0, 0xA0, 0xA5, 0xA5, 0xA5, 0x87, 0x87, 0x87, 0x28, 0x28, 0x28, 0x49, 0x49, 0x49, 0xB6, 0xB6, 0xB6, 0xF9, 0xF9, 0xF9, 0x60, 0x60, 0x60, 0x87, 0x87, 0x87, 0x9D, 0x9D, 0x9D, 0x73, 0x73, 0x73, 0xAA, 0xAA, 0xAA, 0x38, 0x38, 0x38, 0xA0, 0xA0, 0xA0, 0xA2, 0xA2, 0xA2, 0x3A, 0x3A, 0x3A, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x0D, 0x0D, 0x0D, 0x1A, 0x1A, 0x1A, 0x15, 0x15, 0x15, 0x1F, 0x1F, 0x1F, 0x09, 0x09, 0x09, 0x25, 0x25, 0x25, 0x2B, 0x2B, 0x2B, 0x1F, 0x54, 0xFE, 0xF4, 0x00, 0x00, 0x00, 0x52, 0x74, 0x52, 0x4E, 0x53, 0x00, 0x02, 0x01, 0x0F, 0x04, 0x15, 0x30, 0x35, 0xD6, 0xEE, 0xE5, 0x11, 0xF1, 0x57, 0x0C, 0xC2, 0x25, 0x21, 0xB1, 0x07, 0x29, 0x3C, 0xEB, 0xE3, 0x47, 0xFE, 0x1B, 0x4F, 0xDF, 0x60, 0x79, 0x63, 0xCC, 0xFE, 0x9B, 0x59, 0xF4, 0x53, 0x4D, 0xF1, 0xB2, 0x97, 0x81, 0xB1, 0x96, 0x3C, 0xF8, 0xA8, 0x84, 0x8E, 0xB5, 0xDD, 0xB8, 0xDF, 0xBB, 0xD9, 0x9E, 0xF6, 0x47, 0x3E, 0xF2, 0x73, 0xC7, 0x76, 0xC5, 0xA2, 0x58, 0xAD, 0xC5, 0xC9, 0xF5, 0x77, 0x64, 0xCC, 0x6F, 0x70, 0xDF, 0xC1, 0x85, 0x4B, 0x92, 0xE1, 0x8B, 0x82, 0x42, 0x7F, 0x00, 0x00, 0x02, 0x7D, 0x49, 0x44, 0x41, 0x54, 0x38, 0xCB, 0x6D, 0x53, 0xE5, 0x9A, 0xE3, 0x30, 0x0C, 0x8C, 0xC3, 0xD0, 0xA6, 0x6D, 0xA0, 0xBC, 0x65, 0xEE, 0x32, 0x33, 0xF3, 0x1E, 0xDA, 0xB1, 0x43, 0xEF, 0xFF, 0x1E, 0xA7, 0x40, 0x7B, 0xBB, 0xF7, 0x9D, 0x7E, 0xC9, 0x9E, 0xB1, 0x6C, 0xCF, 0x48, 0x1C, 0x97, 0x07, 0x42, 0x22, 0xE2, 0xFF, 0x93, 0xE7, 0xC1, 0xDB, 0x46, 0x59, 0x71, 0x04, 0x94, 0xC2, 0x46, 0x45, 0x96, 0x9B, 0x36, 0xFA, 0x82, 0x1B, 0x4E, 0x47, 0x3D, 0xAB, 0x6D, 0x48, 0xB0, 0x8B, 0x9A, 0x13, 0xD5, 0x2B, 0x0C, 0x5C, 0x01, 0x7D, 0xC6, 0xB7, 0x4A, 0x04, 0x63, 0x5C, 0xD8, 0x90, 0x78, 0x4E, 0x98, 0x14, 0x20, 0xC5, 0x7A, 0xCA, 0xCE, 0xAF, 0x94, 0x5A, 0x6D, 0x9C, 0x86, 0x56, 0x94, 0xC4, 0x72, 0x2F, 0xCB, 0x53, 0x76, 0x8E, 0x77, 0x35, 0xD8, 0xF0, 0x08, 0x44, 0x5B, 0x91, 0x94, 0x29, 0xCE, 0x19, 0x2D, 0x23, 0xC3, 0x85, 0x62, 0x82, 0x13, 0xEA, 0xB3, 0x20, 0x08, 0x36, 0xDD, 0x2B, 0x4A, 0x72, 0x86, 0xBE, 0x25, 0x24, 0x35, 0x6C, 0x57, 0x4D, 0xCE, 0x87, 0x0C, 0x70, 0x36, 0x5A, 0xCE, 0xAF, 0x59, 0x98, 0x13, 0x70, 0xC9, 0xB1, 0xE1, 0x81, 0xCD, 0x4D, 0x9C, 0x11, 0xA0, 0x8A, 0xBA, 0x9C, 0x5B, 0xB5, 0x60, 0x4D, 0x20, 0x1D, 0x83, 0xE7, 0x90, 0xAC, 0xA7, 0x8B, 0xD0, 0x0F, 0xE2, 0xA3, 0xD7, 0x7A, 0xC7, 0xEA, 0xB3, 0xD5, 0x15, 0x18, 0xAB, 0x15, 0x9E, 0x13, 0x9D, 0xB3, 0x34, 0xF7, 0x48, 0x18, 0x1E, 0xD4, 0xDD, 0x79, 0x2D, 0xA6, 0x1E, 0x2C, 0xBC, 0x74, 0xF3, 0x52, 0x46, 0x1C, 0x2A, 0x97, 0xD6, 0x07, 0xE8, 0x6C, 0xD7, 0x3A, 0x18, 0x91, 0xE4, 0xC1, 0xD9, 0x4B, 0xD5, 0x0A, 0x68, 0x61, 0x9E, 0xEB, 0xAB, 0x12, 0xFE, 0xE1, 0xEC, 0xE9, 0x61, 0xEF, 0x30, 0x0C, 0x8E, 0xAA, 0x11, 0xD4, 0xC1, 0x7A, 0xCB, 0x84, 0x6F, 0xF0, 0xD2, 0xF9, 0x4C, 0x23, 0x1E, 0xA1, 0x2C, 0xB8, 0xFD, 0x4E, 0xA3, 0x46, 0xE3, 0x6E, 0x67, 0x67, 0x61, 0x1D, 0xFB, 0x1E, 0x6E, 0x8F, 0x05, 0x31, 0x15, 0xDA, 0x2C, 0x2B, 0xF5, 0x97, 0xC3, 0xE7, 0x60, 0xBB, 0x47, 0xE1, 0x1A, 0x36, 0xBA, 0xEA, 0xBE, 0x9F, 0x2E, 0x7E, 0x7B, 0xBD, 0xFA, 0xCA, 0x0E, 0x1E, 0xFC, 0x53, 0x6E, 0xAC, 0x13, 0xFD, 0x0D, 0xFB, 0x11, 0x9C, 0x7C, 0x1A, 0x0C, 0x4E, 0xEF, 0x37, 0xDE, 0xE5, 0xB5, 0x5D, 0xBC, 0xA1, 0xEC, 0x0E, 0x4E, 0x7F, 0x14, 0x5F, 0x8F, 0x71, 0x3F, 0x8E, 0xE2, 0xB8, 0x34, 0x3D, 0xB1, 0x5E, 0x94, 0x8A, 0x29, 0xAE, 0xBD, 0xAA, 0x1F, 0xC4, 0xD3, 0x81, 0x22, 0x77, 0x97, 0xDB, 0x31, 0x0D, 0xE9, 0x68, 0xEF, 0xD9, 0xA3, 0xB5, 0xFD, 0xA1, 0x5C, 0x31, 0x33, 0xDC, 0x28, 0xEA, 0x2C, 0xC0, 0x0F, 0xC3, 0xE1, 0xDB, 0xC9, 0x23, 0xFC, 0xB1, 0x70, 0xF7, 0xD8, 0xC7, 0x20, 0x16, 0xAB, 0x96, 0x2E, 0x12, 0xC7, 0x79, 0xA1, 0x58, 0x25, 0xCC, 0x27, 0x8D, 0xA3, 0x6F, 0x94, 0xDE, 0xEE, 0xFD, 0xEA, 0x0C, 0xF7, 0x63, 0x1F, 0x37, 0xFA, 0x61, 0x40, 0xBD, 0xEA, 0x04, 0xFC, 0x44, 0xE5, 0x36, 0x26, 0x8C, 0xE1, 0x46, 0x83, 0xE1, 0x88, 0x5D, 0x5E, 0x6F, 0xFD, 0x3C, 0x8E, 0x31, 0x8B, 0xFC, 0x54, 0xAA, 0x5E, 0x13, 0x94, 0x94, 0xB7, 0xB1, 0x47, 0x23, 0x10, 0x0A, 0xBE, 0x10, 0x7A, 0x33, 0x47, 0x5E, 0x14, 0xC2, 0x98, 0x92, 0x54, 0x6C, 0x9A, 0x48, 0x5D, 0x01, 0xB7, 0x09, 0x1C, 0xA1, 0x41, 0x44, 0x89, 0x36, 0x94, 0x6F, 0x2C, 0x2D, 0xF6, 0x73, 0xBF, 0x6A, 0x0E, 0x02, 0x21, 0x3B, 0xC0, 0x0D, 0x41, 0x47, 0x3F, 0x24, 0xDE, 0xFE, 0xFD, 0xDC, 0x52, 0xFB, 0xEB, 0x8E, 0xD8, 0x4C, 0x5E, 0x69, 0xCB, 0xA5, 0xBC, 0xE1, 0x80, 0xB8, 0xB8, 0x58, 0xEA, 0xB1, 0xBF, 0xC2, 0x55, 0xC5, 0x4E, 0xFE, 0x69, 0xD4, 0xF5, 0x75, 0x87, 0xB4, 0x9C, 0x5D, 0x7F, 0xDD, 0x72, 0x5A, 0x31, 0xD3, 0x92, 0x37, 0xC6, 0xDA, 0xAA, 0x4F, 0x15, 0xC1, 0x55, 0xBD, 0x7C, 0x51, 0xED, 0x1A, 0xB9, 0x96, 0xA2, 0xD4, 0x2D, 0xE4, 0x4D, 0x58, 0x46, 0xC2, 0xB8, 0x9A, 0xE5, 0xED, 0xB1, 0xB4, 0xD2, 0x3A, 0x61, 0xA4, 0x83, 0xA1, 0x4D, 0x4C, 0x30, 0x2E, 0x6B, 0xF2, 0x92, 0x6B, 0x7C, 0x1A, 0x2D, 0x51, 0x70, 0x77, 0x34, 0xD2, 0x6B, 0x25, 0xA3, 0x62, 0x1B, 0xC5, 0xF6, 0x54, 0xFD, 0x90, 0xCD, 0x2F, 0xC3, 0x8B, 0xCC, 0xA6, 0x22, 0x3B, 0x46, 0x3A, 0x4A, 0x22, 0xCC, 0x71, 0x45, 0xB2, 0xB9, 0x7F, 0x02, 0x46, 0x7E, 0x75, 0x25, 0x8F, 0xD0, 0xDF, 0xE9, 0xFF, 0x03, 0x82, 0x0B, 0xA8, 0x86, 0x86, 0x51, 0x26, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,
}
